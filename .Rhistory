"phenomenological",
"ethnographic",
"grounded theory",
"incidence",
"prevalence",
"daly"),
laboratory = c("vitro",
"vivo",
"animal",
"laboratory",
"preclinical",
"pigs",
" pig ",
"rats",
" rat ",
"mouse",
"mice",
"rabbit",
"sheep",
"dogs",
" dog ",
"phantom",
NA,
NA,
NA,
NA),
review = c("review",
"overview",
"meta-analysis",
"meta analysis",
"pubmed",
"medline",
"cochrane",
"prospero",
"studies included",
NA,
NA,
NA,
NA,
NA,
NA,
NA,
NA,
NA,
NA,
NA)
)
typesofpapers_additional <- data.frame(interventional = c("experimental",
"before and after study",
"interrupted time series",
"factorial",
"cluster",
"parallel",
"underwent",
NA,
NA,
NA,
NA,
NA,
NA,
NA,
NA),
observational = c("follow-up study",
"registry",
"prospective",
"reliability",
"secondary data analysis",
"secondary analysis",
"associat",
"correlation",
"bracketing",
"thematic",
"examination",
"analytical",
"ecologic",
"estimate",
"report of"),
laboratory = c("specimen",
"cultured",
"testing machine",
"cells isolated",
"bovine",
NA,
NA,
NA,
NA,
NA,
NA,
NA,
NA,
NA,
NA),
review = c("embase",
"cinahl",
"bibliograph",
"reference list",
"hand-search",
"manual search",
"data extraction",
NA,
NA,
NA,
NA,
NA,
NA,
NA,
NA))
# Taking a sample of 100 for validation
papertype_sample <- as.data.frame(matrix(NA, nrow = 100, ncol = 2))
setwd("~/Downloads/covid_transparency/pmc")
filepath = dir(pattern=glob2rx("PMC*.xml"))
set.seed(1230)
papers_sample <- sample(filepath, size = 100, replace = FALSE)
for (i in 1:length(papers_sample)) {
data <- read_xml(papers_sample[i])
# Extracting pmcid and put it in the first column
pmcid <- xml_find_all(data, ".//article-id")
pmcid <- xml_text(pmcid[1])
papertype_sample$V1[i] <- pmcid
# Extracting title
title <- xml_find_all(data, ".//article-title")
title <- xml_text(title[1])
title <- tolower(title)
title <- gsub("–", "-", title)
title <- gsub("—", "-", title)
# Extracting abstract
abstract <- xml_find_all(data, ".//abstract")
abstract <- xml_text(abstract)
abstract <- tolower(abstract)
abstract <- gsub("–", "-", abstract)
abstract <- gsub("—", "-", abstract)
# Checking whether title has any of the basic words
if (is.element(TRUE, mapply(grepl, typesofpapers_basic$review, title))) {
papertype_sample$V2[i] <- "review"
} else if (is.element(TRUE, mapply(grepl, typesofpapers_basic$interventional, title))) {
papertype_sample$V2[i] <- "interventional"
} else if (is.element(TRUE, mapply(grepl, typesofpapers_basic$observational, title))) {
papertype_sample$V2[i] <- "observational"
} else if (is.element(TRUE, mapply(grepl, typesofpapers_basic$laboratory, title))) {
papertype_sample$V2[i] <- "laboratory"
} else {papertype_sample$V2[i] <- "other"}
# Checking whether abstract has any of the basic words
if (papertype_sample$V2[i] == "other") {
if (rlang::is_empty(abstract) == FALSE) {
if (is.element(TRUE, mapply(grepl, typesofpapers_basic$review, abstract))) {
papertype_sample$V2[i] <- "review"
} else if (is.element(TRUE, mapply(grepl, typesofpapers_basic$observational, abstract))) {
papertype_sample$V2[i] <- "observational"
} else if (is.element(TRUE, mapply(grepl, typesofpapers_basic$laboratory, abstract))) {
papertype_sample$V2[i] <- "laboratory"
} else if (is.element(TRUE, mapply(grepl, typesofpapers_basic$interventional, abstract))) {
papertype_sample$V2[i] <- "interventional"
} else {papertype_sample$V2[i] <- "other"}
}}
# Checking whether abstract has any of the additional words
if (papertype_sample$V2[i] == "other") {
if (rlang::is_empty(abstract) == FALSE) {
if (is.element(TRUE, mapply(grepl, typesofpapers_additional$review, abstract))) {
papertype_sample$V2[i] <- "review"
} else if (is.element(TRUE, mapply(grepl, typesofpapers_additional$observational, abstract))) {
papertype_sample$V2[i] <- "observational"
} else if (is.element(TRUE, mapply(grepl, typesofpapers_additional$laboratory, abstract))) {
papertype_sample$V2[i] <- "laboratory"
} else if (is.element(TRUE, mapply(grepl, typesofpapers_additional$interventional, abstract))) {
papertype_sample$V2[i] <- "interventional"
} else {papertype_sample$V2[i] <- "other"}
}}
}
setwd("~")
write.csv(papertype_sample, "papertype_sample_valid.csv")
### Read csv after manual validation:
papertype_sample_valid <- read.csv("papertype_sample_valid.csv")
table(papertype_sample_valid$predicted,papertype_sample_valid$true)
table(papertype_sample_valid$predicted,papertype_sample_valid$TRUE)
View(papertype_sample_valid)
table(papertype_sample_valid$predicted,papertype_sample_valid$TRUE.)
table(papertype_sample_valid$predicted,papertype_sample_valid$TRUE.)
data1 <- read.table("data/covid-rcts-iloveevidence.ris", quote = "")
data1 <- read.table("data/covid-rcts-iloveevidence.ris", quote = "\"")
data1 <- read.table("data/covid-rcts-iloveevidence.ris", quote = "\"", fill = F)
data1 <- read.table("data/covid-rcts-iloveevidence.ris", fill = F)
data1 <- read.delim("data/covid-rcts-iloveevidence.ris", quote = "", fill = F)
library(dplyr)
library(stringr)
names(data1)
data2 <- data1 %>% filter(str_detect(TY....JOUR, "DO  - "))
View(data2)
ris_covid <- read.delim("data/covid-rcts-iloveevidence.ris",
quote = "",
fill = F)
dois <- ris_covid %>%
filter(str_detect(TY....JOUR, "DO  - "))
c <- "DO  - 102030"
gsub("DO  - ", "", c)
dois <- apply(dois, 1, function(x) gsub("DO  - ", "", dois[x,]))
dois <- ris_covid %>%
filter(str_detect(TY....JOUR, "DO  - "))
dois <- apply(dois, 2, function(x) gsub("DO  - ", "", dois[x,]))
dois <- ris_covid %>%
filter(str_detect(TY....JOUR, "DO  - "))
dois[] <- sapply(dois, function(x) gsub("DO  - ", "", as.character(x)))
View(dois)
names(dois) <- "dois"
View(dois)
names(dois)
names(dois) <- "doi"
names(dois)
View(dois)
names(opendata)
data1 <- merge(opendata, dois, by="doi")
data1
library(revtools)
data2 <- read_bibliography("~/Downloads/litcovid.export.all.ris")
ris_covid2 <- read.delim("~/Downloads/litcovid.export.all.ris",
quote = "",
fill = F)
names(ris_covid2)
pmids <- ris_covid %>%
filter(str_detect(TY....JOUR, "AN  - "))
pmids <- ris_covid2 %>%
filter(str_detect(TY....JOUR, "AN  - "))
rm(ris_covid2)
# All papers
ris_covid_all <- read.delim("data/litcovid.export.all.ris",
quote = "",
fill = F)
pmids <- ris_covid_all %>%
filter(str_detect(TY....JOUR, "AN  - "))
names(pmids) <- "pmid"
names(opendata)
data2 <- merge(opendata, pmids, by = "pmid")
names(pmids)
View(data2)
View(pmids)
pmids[] <- sapply(dois, function(x) gsub("AN  - ", "", as.character(x)))
pmids[] <- sapply(pmids, function(x) gsub("AN  - ", "", as.character(x)))
data2 <- merge(opendata, pmids, by = "pmid")
View(data2)
# Loading required packages
pacman::p_load(dplyr,
tidyr,
rtransparent,
metareadr,
europepmc,
here)
db_x <- epmc_search(query = '(FIRST_PDATE:[2020-01-01 TO 2022-06-09]) AND (OPEN_ACCESS:y)',
limit = 1000000,
parsed = T,
verbose = F)
db_x <- epmc_search(query = '(FIRST_PDATE:[2020-01-01 TO 2022-06-09]) AND (OPEN_ACCESS:y)',
limit = 1000000,
output = "parsed",
verbose = F)
db_x <- epmc_search(query = '(FIRST_PDATE:[2020-01-01 TO 2022-06-09]) AND (OPEN_ACCESS:y)',
limit = 2000000,
output = "parsed",
verbose = F)
db_1 <- read.csv("data/db_2020_1.csv")
data1 <- merge(db_1, pmids, by = "pmid")
db_2 <- read.csv("data/db_2020_2.csv")
data2 <- merge(db_2, pmids, by = "pmid")
pmids$pmid <- tolower(pmids$pmid)
data1 <- merge(db_1, pmids, by = "pmid")
data2 <- merge(db_2, pmids, by = "pmid")
db_3 <- read.csv("data/db_2021_1.csv")
data3 <- merge(db_3, pmids, by = "pmid")
data_all <- merge(opendata, pmids, by = "pmid")
db_4 <- read.csv("data/db_2021_2.csv")
data4 <- merge(db_4, pmids, by = "pmid")
db_5 <- read.csv("data/db_2022.csv")
data5 <- merge(db_5, pmids, by = "pmid")
nrow(data1) + nrow(data2) + nrow(data3) + nrow(data4) + nrow(data5)
View(data1)
db_all <- rbind(db_1, db_2, db_3, db_4, db_5)
db_all <- rbind(data1, data2, data3, data4, data5)
write.csv(db_all, "data/db_all.csv")
opendata2 <- merge(opendata, db_all, by = "pmid")
head(db_all, 2)
dois <- ris_covid_all %>%
filter(str_detect(TY....JOUR, "DO  - "))
install.packages('KDViz')
convertRIS2CSV <- function(infile='infile.RIS',outfile='outfile.csv',breakfield='ID',sep=";"){
## read in
con <-  file(infile)
tmp <- readLines(con)
close(con)
## set up
RECZ <- REC <- list()
j <- 1
## loop rows
for(i in 1:length(tmp)){
v <- unlist(strsplit(tmp[i]," - ")[[1]]) #split on -
fld <- gsub(" ","",v[1])                 #the field
afld <- gsub("^[[:space:]]","",v[2])     #the content after field
if(!is.null(REC[[fld]])){                 #had one already
afld <- paste(REC[[fld]],afld,sep="; ")
}
REC[[fld]] <- afld
if(fld==breakfield){                #advance article
RECZ[[j]] <- REC
REC <- list()
j <- j+1
}
}
cat('no. articles = ',j,'\n')
## convert
dd <- data.table::rbindlist(RECZ,fill=TRUE)
## write out
data.table::fwrite(dd,file=outfile)
}
convertRIS2CSV("data/litcovid.export.all.ris", "data/litcovid.csv")
a <- read.table(file = '~/Downloads/litcovid.export.all.tsv', sep = '\t', header = TRUE)
a <- read.csv(file = '~/Downloads/litcovid.export.all.tsv', sep = '\t', header = TRUE)
View(a)
a <- read.csv(file = '~/Downloads/litcovid.export.all (copy).tsv', sep = '\t', header = TRUE)
ris_covid_all <- read.csv("data/litcovid.export.all.tsv",
sep = "\t",
header = T)
names(ris_covid_all)
# New version
ris_covid_all <- read.csv("data/litcovid.export.all.tsv",
sep = "\t",
header = T)
data_all <- merge(opendata, ris_covid_all$pmid, by = "pmid")
data_all <- merge(opendata, ris_covid_all, by = "pmid")
ris_covid_all <- read.delim("data/06102022.litcovid.export.tsv",
quote = "",
fill = F)
View(ris_covid_all)
pmids <- ris_covid_all[!is.na(as.numeric(ris_covid_all$X.............................................................................)), ]
pmids1 <- as.data.frame(pmids)
View(pmids1)
names(pmids1)
names(pmids) <- "pmid"
names(pmids1) <- "pmid"
data1 <- merge(db_1, pmids, by = "pmid")
data1 <- merge(db_1, pmids1, by = "pmid")
data2 <- merge(db_2, pmids1, by = "pmid")
data3 <- merge(db_3, pmids1, by = "pmid")
data4 <- merge(db_4, pmids1, by = "pmid")
data5 <- merge(db_5, pmids1, by = "pmid")
nrow(data1) + nrow(data2) + nrow(data3) + nrow(data4) + nrow(data5)
ris_covid_all <- read.delim("data/06102022.litcovid.export.tsv",
quote = "",
fill = F)
pmids <- as.data.frame(ris_covid_all[!is.na(as.numeric(ris_covid_all$X.............................................................................)), ])
View(pmids)
names(ris_covid_all) <- "pmid"
pmids <- as.data.frame(ris_covid_all[!is.na(as.numeric(ris_covid_all$pmid)), ])
View(pmids)
names(pmids)
names(pmids) <- "pmid"
names(pmids)
data_all <- merge(opendata, pmids, by = "pmid")
nrow(data_all)/nrow(opendata)
write.csv(data1, "data/db_oa_2020_1.csv")
write.csv(data2, "data/db_oa_2020_2.csv")
write.csv(data3, "data/db_oa_2021_1.csv")
write.csv(data4, "data/db_oa_2021_2.csv")
write.csv(data5, "data/db_oa_2022.csv")
View(data1)
d <- merge(db_1, pmids, by="pmid")
rm(d)
rm(data)
rm(data_all)
rm(dois)
rm(opendata2)
rm(papertype_sample)
rm(papertype_sample_valid)
rm(pmids1)
rm(ris_covid)
rm(typesofpapers_additional)
rm(typesofpapers_basic)
rm(a)
rm(list=c(abstract, c, filepath, i, papers_sample, pmcid, title))
dat1 <- readRDS("~/Downloads/med_covid_data_12062022-20220612T061152Z-001/med_covid_data_12062022/results_data_1.rds")
dat2 <- readRDS("~/Downloads/med_covid_data_12062022-20220612T061152Z-001/med_covid_data_12062022/results_data_2.rds")
dat3 <- readRDS("~/Downloads/med_covid_data_12062022-20220612T061152Z-001/med_covid_data_12062022/results_data_3.rds")
dat4 <- readRDS("~/Downloads/med_covid_data_12062022-20220612T061152Z-001/med_covid_data_12062022/results_data_3.rds")
dat4 <- readRDS("~/Downloads/med_covid_data_12062022-20220612T061152Z-001/med_covid_data_12062022/results_data_4.rds")
dat5 <- readRDS("~/Downloads/med_covid_data_12062022-20220612T061152Z-001/med_covid_data_12062022/results_data_5.rds")
nrow(dat1)
nrow(dat2)
nrow(dat3)
nrow(dat4)
nrow(dat5)
nrow(dat1) + nrow(dat2) + nrow(dat3) + nrow(dat4) + nrow(dat5)
names(dat1)
dat1 <- dat1 %>% distinct(pmid, .keep_all = TRUE)
library(dplyr)
dat1 <- dat1 %>% distinct(pmid, .keep_all = TRUE)
all1 <- readRDS("~/Downloads/med_covid_data_12062022-20220612T061152Z-001/med_covid_data_12062022/results_all_1.rds")
all1 <- data.table::rbindlist(all1, fill = TRUE)
data1 <- data1 %>% distinct(pmid, .keep_all = TRUE)
opendata1 <- merge(data1, dat1, by = "pmid")
opendata1 <- merge(data1, dat1, by = "pmid") %>% merge(all1)
all2 <- readRDS("~/Downloads/med_covid_data_12062022-20220612T061152Z-001/med_covid_data_12062022/results_all_2.rds")
all2 <- data.table::rbindlist(all2, fill = TRUE)
all3 <- readRDS("~/Downloads/med_covid_data_12062022-20220612T061152Z-001/med_covid_data_12062022/results_all_3.rds")
all3 <- data.table::rbindlist(all3, fill = TRUE)
all4 <- readRDS("~/Downloads/med_covid_data_12062022-20220612T061152Z-001/med_covid_data_12062022/results_all_4.rds")
all4 <- data.table::rbindlist(all4, fill = TRUE)
all5 <- readRDS("~/Downloads/med_covid_data_12062022-20220612T061152Z-001/med_covid_data_12062022/results_all_5.rds")
all5 <- data.table::rbindlist(all5, fill = TRUE)
opendata2 <- merge(data2, dat2, by = "pmid") %>% merge(all2)
opendata3 <- merge(data3, dat3, by = "pmid") %>% merge(all3)
opendata4 <- merge(data4, dat4, by = "pmid") %>% merge(all4)
opendata5 <- merge(data5, dat5, by = "pmid") %>% merge(all5)
opendata_all <- rbind(opendata1, opendata2, opendata3, opendata4, opendata5)
opendata_all <- opendata_all %>% distinct(pmid, .keep_all = TRUE)
write.csv(opendata_all, "data/opendata_all.csv")
### Selecting only needed columns:
opendata_all <- opendata_all %>% select(pmid,
pmcid,
doi,
title,
authorString,
journalTitle,
journalIssn,
publisher,
firstPublicationDate,
journalVolume,
pageInfo,
issue,
type,
is_research,
is_review,
citedByCount,
is_coi_pred,
coi_text,
is_fund_pred,
fund_text,
is_register_pred,
register_text,
is_open_data,
open_data_category,
is_open_code,
open_data_statements,
open_code_statements)
library(here)
### Adding JIFs:
#### First, importing jif file:
jif <- read.csv(here("data", "covid_transparency_jif2020.csv"))
#### Merging it with opendata:
opendata$journalIssn <- toupper(opendata$journalIssn)
opendata = opendata_all
#### Merging it with opendata:
opendata$journalIssn <- toupper(opendata$journalIssn)
opendata <- opendata %>% separate(journalIssn, c("issn1", "issn2"), sep = "; ")
library(tidyr)
opendata <- merge(x = opendata,
y = jif[, c("issn", "jif2020")],
by.x = "issn1",
by.y = "issn",
all.x = TRUE)
opendata <- opendata %>% separate(journalIssn, c("issn1", "issn2"), sep = "; ")
opendata <- merge(x = opendata,
y = jif[, c("issn", "jif2020")],
by.x = "issn1",
by.y = "issn",
all.x = TRUE)
opendata <- merge(x = opendata,
y = jif[, c("issn", "jif2020")],
by.x = "issn2",
by.y = "issn",
all.x = TRUE)
opendata <- opendata %>% distinct(pmid, .keep_all = TRUE) #Removing duplicates
opendata <- opendata %>%
mutate(jif2020 = coalesce(jif2020.x, jif2020.y)) %>%
subset(select = -c(jif2020.x, jif2020.y))
opendata$jif2020 <- as.numeric(opendata$jif2020)
### Adding SCImago:
scimago <- read.csv(here("data", "covid_transparency_scimagojr_2020.csv"), sep = ";")
scimago <- scimago %>% separate(Issn, c("issn1", "issn2"))
scimago$issn1 <- gsub("(\\d{4})(\\d{4})$", "\\1-\\2", scimago$issn1)
scimago$issn2 <- gsub("(\\d{4})(\\d{4})$", "\\1-\\2", scimago$issn2)
#### Merging with opendata:
opendata <- merge(x = opendata,
y = scimago[, c("issn1", "issn2", "SJR", "H.index", "Publisher")],
by.x = "issn1",
by.y = "issn1",
all.x = TRUE)
opendata <- merge(x = opendata,
y = scimago[, c("issn1", "issn2", "SJR", "H.index", "Publisher")],
by.x = "issn2.x",
by.y = "issn1",
all.x = TRUE)
opendata <- merge(x = opendata,
y = scimago[, c("issn1", "issn2", "SJR", "H.index", "Publisher")],
by.x = "issn1",
by.y = "issn2",
all.x = TRUE)
opendata <- opendata %>% distinct(pmid, .keep_all = TRUE) #Removing duplicates
opendata <- opendata %>%
mutate(sjr2020 = coalesce(SJR, SJR.x, SJR.y),
scimago_publisher = coalesce(Publisher.x, Publisher.y, Publisher),
scimago_hindex = coalesce(H.index.x, H.index.y, H.index)) %>%
subset(select = -c(SJR.x, SJR.y, SJR, issn2.y, issn2.x, issn1.y, H.index.x, H.index.y, H.index, Publisher.x, Publisher.y, Publisher))
#### Changing commas to dots:
opendata$sjr2020 <- gsub(",", ".", as.character(opendata$sjr2020))
#### And changing type to numeric:
opendata$sjr2020 <- as.numeric(opendata$sjr2020)
opendata <- opendata[, c(2:7, 1, 29, 8:28, 30:32)]
write.csv(opendata, "data/opendata_all_modified.csv")
View(opendata)
table(opendata$is_coi_pred)
prop.table(table(opendata$is_coi_pred))
prop.table(table(opendata$is_fund_pred))
prop.table(table(opendata$is_register_pred))
prop.table(table(opendata$is_open_code))
table(opendata$is_open_code)
table(opendata$is_open_data)
